#### Stage 1: Build the react application
FROM balenalib/raspberry-pi-alpine-node:14.16-latest as build

# Configure the main working directory inside the docker image. 
# This is the base directory used in any further RUN, COPY, and ENTRYPOINT 
# commands.
WORKDIR /app

# Copy the package.json as well as the package-lock.json and install 
# the dependencies. This is a separate step so the dependencies 
# will be cached unless changes to one of those two files 
# are made.
COPY package.json ./

# python install
RUN apk add --no-cache --virtual .gyp python2 make g++

RUN npm install

RUN apk del .gyp

# Copy the main application
COPY . ./

# Arguments
#ARG REACT_APP_API_BASE_URL
#ENV REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}

# Build the application
RUN npm run build

#### Stage 2: Serve the React application from Nginx 
FROM tobi312/rpi-nginx

# Copy the react build from Stage 1
#COPY --from=build /app/build /var/www
COPY --from=build /app/build /usr/share/nginx/html

# Copy our custom nginx config
#COPY nginx.conf /etc/nginx/nginx.conf

# Expose port 3000 to the Docker host, so we can access it 
# from the outside.
EXPOSE 80

ENTRYPOINT ["nginx","-g","daemon off;"]
